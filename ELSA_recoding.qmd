---
title: "ELSA voting patterns study"
subtitle: Exploratory analysis  - draft version 9
author: "Pierre Walth√©ry"
date: today
date-format: DD MMMM YYYY
format: 
  html:
   embed-resources: true
   page-layout: full
   mainfont: "Open Sans"
   toc: true
   smooth-scroll: true
   toc-location: left

#  odt: default
execute:
  warning: false
  message: false
  echo: false
  cache: false

---



## Introduction
This document presents preliminary descriptive,  uni-, bi-   and multivariate analysis   of voting at the 2019 General Elections  among the 50+, using  data from the English Longitudinal Study of Ageing - ELSA at Wave 10.

- Section 1 presents the variables included in the analysis
- Section 2 contains information about variable recoding and related issues
- Section 3 includes  unweighted and weighted frequency tables of unrecoded, recoded and derived socio-economic (SEV) and independent (IV) variables.
- Section 4 documents unweighted and weighted 2-way contingency tables of SEVs and IVs  by turnout at the 2019 general elections, age, sex. 
- Section 5 presents additional four way tables of voter turnout at the 2019 GE by SEVs and IVs broken down by age and sex, as well as   three way plots  of voter turnout at the 2001, 2005, 2015, 2017, 2019 general elections by age, sex.
- Section 6 presents the results of four series of stepwise logistic regression models of voting at the 2019 GE.


```{r data}

rm(list=ls())

library(haven)
library(survey)
library(dplyr)
library(knitr)
library(gtsummary)
library(ggplot2)
library(weights)


avars<-c("AgeCat2.fr", "AgeCat3.fr","cfmap2","cfmap3", "cfmetm2", "cfmetm3", "dimarr", "edqual", "erfvol", "ethnic", "exrela", "headlba","headlbe","hehelf2","hehelf3", "hhdtypb","hobb","iafcon", "iafind","indsex", "pscedd", "pscede", "scorgpo","scorgrl","spcar",  "sptraa", "tenureb","VotGE01","VotGE05","VotGE15","VotGE17","VotGE19","VotRec2","VotRec0","VotRec01","w10nssec5","wpdes")    

# ovars<-c("cfmap2","cfmap3", "cfmetm2", "cfmetm3", "digran", "dimarr", "edqual", "erfvol","erlvolba", "erlvolpe", "ethnic","exlo80","exlo90", "exrela", "headlba","headlbe","hehelf2","hehelf3", "hhdtypb","hobb","iafcon", "iafind","indsex", "psagf", "pscedd", "pscede","sclfcoa", "scorgch", "scorgpo","scorgrl","spcar",  "sptraa", "tenureb", "VotGE01","VotGE05","VotGE15","VotGE17","VotGE19","w10nssec5","wpdes")    



ovars<-c("erfvol", "ethnic", "headlba",  "headlbe","hobb", "iafind", "indsex","pscedd", "pscede", "scorgpo", "scorgrl","spcar", "VotGE01","VotGE05","VotGE15","VotGE17","VotGE19")    


wvars<-c("erfvol", "ethnic", "headlba","headlbe", "hobb", "iafind","indsex", "pscedd", "pscede", "scorgpo","scorgrl", "spcar",  "VotGE01","VotGE05","VotGE15","VotGE17","VotGE19")    

exvars<-c("AgeGap31","AgeGap32", "cfmap2","cfmap3", "cfmetm2", "cfmetm3", "dimarr", "edqual", "exlo90d", "exrela", "hehelf2", "hehelf3", "hhdtypb","iafcon","sptraa", "tenureb","w10nssec5","wpdes") 

dvars<-c("AgeCat2.fr", "AgeCat3.fr","VotRec2.fr","VotRec0.fr","VotRec01.fr")

uvars<-paste0(c(ovars,exvars),".f")
rvars<-paste0(c(ovars,exvars),".fr")

bivars19<-c("AgeCat2","AgeCat3", "AgeGap31", "AgeGap32", "cfmap2", "cfmap3", "cfmetm2", "cfmetm3","digran", "dimarr", "edqual", "erfvol", "erlvolba","erlvolpe","ethnic", "exlo90d", "exrela", "headlba","headlbe","hehelf2","hehelf3", "hhdtypb","hobb","iafcon", "iafind","indsex", "pscedd", "pscede", "sclfcoa",  "scorgch","scorgpo","scorgrl","spcar",  "sptraa", "tenureb","VotGE01","VotGE05","VotGE15","VotGE17","VotRec2","VotRec0","VotRec01","w10nssec5","wpdes")     

reglab1<-list(AgeCat3.fr="Age",
                              indsex.fr="Sex", 
                              dimarr.fr="Marital/relationship status", 
                              edqual.fr="Highest qualification",
                              wpdes.fr="Economic activity", 
                              tenureb.fr="Housing tenure",
                              VotRec2.fr="Past GE turnout")

      
reglab2<-list(hobb.fr="Internet connection?",
                              pscede.fr="Felt lonely", 
                              hehelf3.fr="Self-rated general health", 
                              iafcon.fr="How getting along financially",
                              cfmetm3.fr="Self-rated mental health", 
                              pscedd.fr="Happy last week?",
                              sclfcoa.fr="Give back to community?", 
                              erlvolpe.fr= "Unpaid carer",
                              AgeGap.r="Perceived/actual age gap (cont)",
                              AgeGap31.fr="Perceived/actual age gap (exact)",
                              AgeGap32.fr="Perceived/actual age gap (+-3 years)",
                              VotRec2.fr="Past GE turnout")

sdvars1<-c("AgeCat3.fr","indsex.fr","dimarr.fr","edqual.fr","wpdes.fr")
sdvars2<-c("AgeCat3.fr","indsex.fr","dimarr.fr","edqual.fr","wpdes.fr","tenureb.fr")
ivars<-c("hobb.fr","pscede.fr","hehelf3.fr","iafcon.fr","cfmetm3.fr","pscedd.fr","sclfcoa.fr","erlvolpe.fr","AgeGap32.fr")

# ivars<-c("hobb.fr","pscede.fr","hehelf3.fr","iafcon.fr","cfmetm3.fr","pscedd.fr","sclfcoa.fr","erlvolpe.fr","AgeGap32.fr")

regvars1<-c("VotRec2.fr",sdvars1)
regvars2<-c("VotRec2.fr",sdvars2)
regvars3<-c("VotRec2.fr",sdvars1,ivars)
regvars4<-c("VotRec2.fr",sdvars2,ivars)

regvars5<-c(sdvars1)
regvars6<-c(sdvars2)
regvars7<-c(sdvars1,ivars)
regvars8<-c(sdvars2,ivars)

datadir<-"~/Data/elsa/UKDA-5050-stata/stata/stata13_se/"

# elsa0<-read_dta(paste0(datadir,"wave_0_common_variables_v2.dta"))
# elsa.ifs<-read_dta(paste0(datadir,"wave_10_ifs_derived_variables.dta"))
# elsa1<-read_dta(paste0(datadir,"wave_1_core_data_v3.dta")) |> select(idauniq,scptpa1,indager,indsex,w1wgt)
# elsa3<-read_dta(paste0(datadir,"wave_3_elsa_data_v4.dta"))  |> select(idauniq,scpt01,indager,indsex,w3xwgt)
# elsa8<-read_dta(paste0(datadir,"wave_8_elsa_data_eul_v2.dta")) |> select(idauniq,scptrvt, indager,indsex,w8xwgt)
# elsa9<-read_dta(paste0(datadir,"wave_9_elsa_data_eul_v2.dta")) |> select(idauniq,scptrvt,indager,indsex,w9xwgt)
# elsa10<-read_dta(paste0(datadir,"wave_10_elsa_data_eul_v4.dta"))
# 
# voted<-list(
# GE01=elsa1,
# GE05=elsa3,
# GE15=elsa8,
# GE17=elsa9,
# GE19=elsa10 |> select(idauniq,scsptrvt,indager,indsex,w10xwgt)
# )
# 
# names(voted[["GE01"]])[which(names(voted[["GE01"]])=="scptpa1")]<-"Wvot"
# names(voted[["GE05"]])[which(names(voted[["GE05"]])=="scpt01")]<-"Wvot"
# names(voted[["GE15"]])[which(names(voted[["GE15"]])=="scptrvt")]<-"Wvot"
# names(voted[["GE17"]])[which(names(voted[["GE17"]])=="scptrvt")]<-"Wvot"
# names(voted[["GE19"]])[which(names(voted[["GE19"]])=="scsptrvt")]<-"Wvot"
# 
# 
# names(elsa1)[which(names(elsa1)=="scptpa1")]<-"VotGE01"
# names(elsa3)[which(names(elsa3)=="scpt01")]<-"VotGE05"
# names(elsa8)[which(names(elsa8)=="scptrvt")]<-"VotGE15"
# names(elsa9)[which(names(elsa9)=="scptrvt")]<-"VotGE17"
# 
# for(w in c(1,3,8,9)){
# tmp<-eval(parse(text=paste0("elsa",w)))
# names(tmp)[3:4]<-c(paste0("indager",w),paste0("indsex",w))
# eval(parse(text=paste0("elsa",w,"<-tmp")))
# }
# 
# elsaw<-merge(elsa10,elsa0|>
#                  select(idauniq,hhdtypb,tenureb,ethnic),
#                  by="idauniq",all.x=T,all.Y=F)
# 
# elsaw<-merge(elsaw,elsa.ifs|>
#                  select(idauniq,edqual),
#                  by="idauniq",all.x=T,all.Y=F)
# 
# ### Cross-sectional voting subsamples
# vot1389<-merge(
#      merge(elsa1,
#            elsa3,
#                  by="idauniq",all=T
#            ),
#       merge(elsa8 ,
#             elsa9 ,
#                  by="idauniq",all=T
#            ),
#            by="idauniq",all=T)
# 
# 
# vot13890<-merge(vot1389,elsa10 |> select(idauniq,scsptrvt,indager,indsex,w10xwgt) ,
#              by="idauniq",all=T
#            )
# 
# names(vot13890)[which(names(vot13890)=="scsptrvt")]<-"VotGE19"
# names(vot13890)[which(names(vot13890)=="indager")]<-"indager10"
# names(vot13890)[which(names(vot13890)=="indsex")]<-"indsex10"
# 
# names(elsaw)[which(names(elsaw)=="scsptrvt")]<-"VotGE19"
# 
# 
# elsaw<-merge(elsaw, vot1389,
#              by="idauniq",all=T
#            )
# 
# 
# elsaw<-elsaw|>filter(!is.na(w10xwgt)) |>
#            select(idauniq,all_of(ovars),exlo80, psagf, exrslf, indager, VotGE19,w10xwgt)
# 
# # elsaw<-elsaw|>filter(!is.na(w10xwgt)) |>
# #            select(idauniq,all_of(ivs),exlo80, psagf, exrslf, indager, VotGE19,w10xwgt)
# 
# # Save the list to an RDS file
# saveRDS(voted, file = "/home/mscsepw2/Dropbox/work/ELSAwork/data/voted.rds")
# 
# write_dta(vot13890, "/home/mscsepw2/Dropbox/work/ELSAwork/data/elsal.dta")
# write_dta(elsaw, "/home/mscsepw2/Dropbox/work/ELSAwork/data/elsaw.dta")

elsaw<-read_dta("/home/mscsepw2/Dropbox/work/ELSAwork/data/elsaw.dta")
elsal<-read_dta("/home/mscsepw2/Dropbox/work/ELSAwork/data/elsal.dta")
voted <- readRDS("/home/mscsepw2/Dropbox/work/ELSAwork/data/voted.rds")

###############################################################################################################
```



```{r functions,tidy=T}
source("functions.R")
```



```{r recode}
############################################################################################
## Renaming voting variables
#elsaw$VotGE19<-elsaw$scsptrvt


labs<-list(
AgeGap.r="Gap: actual and perceived age (cont.)",
AgeGap31.f="Gap: actual and perceived age (exact)",
AgeGap32.f="Gap: actual and perceived age (3 years)",
cfmap.f="Self-rated mental abilities V1",
cfmap2.f="Self-rated mental abilities V2",
cfmap3.f="Self-rated mental abilities V3",
cfmetm.f="Self-rated memory V1",
cfmetm2.f="Self-rated memory V2",
cfmetm3.f="Self-rated memory V3",
digran.f="Whether has any grandchildren",
dimarr.f="Marital/relationship status",
edqual.f="Educational level",
erfvol.f="Volunteered",
erlvolba.f="Cared for baby/child",
erlvolpe.f="Whether cared for a sick/frail person",
ethnic.f="White vs Non-white",
exrela.f="Too little money to spend on their needs?",
exlo80="Expectation (%) that will live to [age]",
exlo90="Expectation (%) that will live to be 85 years old or more",
exlo90d.f="Whether reckon that  will live to be 85 yo or more (dichotomic)",
headlba.f="Difficulty bathing or showering",
headlbe.f="Difficulty getting in and out of bed",
hehelf.f="Self-reported general health V1",
hehelf2.f="Self-reported general health V2",
hehelf3.f="Self-reported general health V3",
hhdtypb.f="Recoded household type, 4 categories",
hobb.f="Internet connection?",
iafcon.f="Financial situation",
iafind.f="Who has the final say in big financial decisions",
indsex.f="Sex",
psagf="Self-perceived age",
pscedd.f="Whether happy much of the time last  week",
pscede.f="Feels lonely?",
sclfcoa.f="I want to give back to my community",
scorgch.f="Whether member of a charity",
scorgpo.f="Whether member of a party, union or environmental groups",
scorgrl.f="Whether member of a church or other religious group",
spcar.f="Whether has use of car/van, as a driver or a passenger",
sptraa.f="How often respondent uses public transport",
tenureb.f="Household Tenure",
VotGE01.f="Whether voter at the 2001 GE",
VotGE05.f="Whether voter at the 2005 GE",
VotGE15.f="Whether voter at the 2015 GE",
VotGE17.f="Whether voter at the 2017 GE",
VotGE19.f="Whether voter at the 2019 GE",
w10nssec5.f="NS-SEC 5 category",
wpdes.f="Economic activity",
wpdes.fr="Economic activity (recoded)",
AgeCat2.fr="Recoded age, 2 category",
AgeCat3.fr="Recoded age, 3 category",
VotRec2.fr="Past voting record, dichotomic",
VotRec0.fr="Past voting record, v1",
VotRec01.fr="Past voting record, v2"
)



## Recode

elsaw<-elsaw|>mutate(
  AgeCat2.fr=as.factor(case_when(
    indager>=50 & indager<70 ~ "50-69",
    indager>=70 ~ "70+"
  )),
  AgeCat3.fr=as.factor(case_when(
    indager>=50 & indager<70 ~ "50-69",
    indager>=70 & indager<80 ~ "70-79",
    indager>=80  ~ "80+"
  )),
  cfmap.f=as_factor( cfmap,"both"),            
cfmap2.f=as_factor( cfmap,"both"),            
cfmap3.f=as_factor( cfmap,"both"),            
   cfmap3.fr=as.factor(case_when(
    cfmap==1 | cfmap==2 ~ "Excellent/v good",
    cfmap==3 ~ "Good",
    cfmap==4 ~ "Fair", 
    cfmap==5 ~ "Poor",
.default = NA
  )),
    cfmap.fr=as.factor(case_when(
    cfmap==1 | cfmap==2 ~ "Excellent/v good",
    cfmap==3 ~ "Good",
    cfmap==4 | cfmap==5 ~ "Fair/poor",
.default = NA
  )),
    cfmap2.fr=as.factor(case_when(
    cfmap==1 | cfmap==2 ~ "Excellent/v good",
    cfmap==3 | cfmap==4~ "Good/Fair",
    cfmap==5 ~ "Poor",
.default = NA
  )),
cfmetm.f=as_factor( cfmetm,"both"),            
cfmetm2.f=as_factor( cfmetm,"both"),            
cfmetm3.f=as_factor( cfmetm,"both"),            
    cfmetm3.fr=as.factor(case_when(
    cfmetm==1 | cfmetm==2 ~ "Excellent/v good",
    cfmetm==3 ~ "Good",
    cfmetm==4 ~ "Fair",  
    cfmetm==5 ~ "Poor",
.default = NA
  )),
    cfmetm.fr=as.factor(case_when(
    cfmetm==1 | cfmetm==2 ~ "Excellent/v good",
    cfmetm==3 ~ "Good",
    cfmetm==4 | cfmetm==5 ~ "Fair/poor",
.default = NA
  )),
    cfmetm2.fr=as.factor(case_when(
    cfmetm==1 | cfmetm==2 ~ "Excellent/v good",
    cfmetm==3 | cfmetm==4~ "Good/Fair",
    cfmetm==5 ~ "Poor",
.default = NA
  )),
digran.f=as_factor( digran,"both"),            
  digran.fr=as.factor(case_when(
    digran==1  ~ "Has gchild",
    digran==2 ~ "None"
  )),
dimarr.f=as_factor( dimarr,"both"),            
  dimarr.fr=as.factor(case_when(
    dimarr==1  ~ "Single",
    dimarr==2 | dimarr==3 ~ "Married/SP",
    dimarr==4 | dimarr==5 ~ "Divorced/separated",
    dimarr==6 ~ "Widowed"
  )),
edqual.f=as_factor( edqual,"both"),            
  edqual.fr=as.factor(case_when(
    edqual==1 | edqual==2 ~ "Further/Degree level",
    edqual==3 | edqual==4  | edqual==5 ~ "Secondary",
    edqual==6 ~ "Other",
    edqual==7 ~ "Below secondary"
  )),
erlvolpe.f=as_factor( erlvolpe,"both"),            
  erlvolpe.fr=as.factor(case_when(
    erlvolpe==1  ~ "Cared for sick/frail",
    erlvolpe==0 ~ "Not a carer"
  )),
erlvolba.f=as_factor( erlvolba,"both"),            
erlvolba.fr=as.factor(case_when(
    erlvolba==0  ~ "No childcare",
    erlvolba==1 ~ "Did childcare"
  )),
exlo90d.f=as.factor(
  ifelse(exlo90>50,"Yes","No")
),
exlo90d.fr=exlo90d.f,
 exrela.f=as_factor( exrela,"both"),            
  exrela.fr=as.factor(case_when(
    exrela==1 |     exrela==2  ~ "Never/rarely",
    exrela==3 ~ "Sometimes",
    exrela==4 | exrela==5 ~ "Often/M of the T"
  )),
   hehelf.f=as_factor( hehelf,"both"),
   hehelf2.f=as_factor( hehelf,"both"),            
   hehelf3.f=as_factor( hehelf,"both"),            
  hehelf2.fr=as.factor(case_when(
    hehelf==1  | hehelf==2 ~ "Excel/V good",
    hehelf==3 | hehelf==4 ~ "Good/Fair",
     hehelf==5  ~ "Poor"
  )),
  hehelf.fr=as.factor(case_when(
    hehelf==1  | hehelf==2 ~ "Excel/V good",
    hehelf==3 ~ "Good",
    hehelf==4 | hehelf==5  ~ "Fair/poor"
  )),
  hehelf3.fr=as.factor(case_when(
    hehelf==1  | hehelf==2 ~ "Excel/V good",
    hehelf==3 ~ "Good",
    hehelf==4 ~ "Fair",
    hehelf==5  ~ "Poor"
  )),
   hhdtypb.f=as_factor( hhdtypb,"both"),            
  hhdtypb.fr=as.factor(case_when(
    hhdtypb==1  | hhdtypb==7 ~ "Single person HH",
    hhdtypb==2 | hhdtypb ==6 ~ "Two adults HH",
    hhdtypb==3 | hhdtypb==4 ~ "Family, large or small ",
    hhdtypb==5 ~ "Large adult HH",
    .default = "Other"
  )),
   iafcon.f=as_factor( iafcon,"both"),            
    iafcon.fr=as.factor(case_when(
    iafcon==1   ~ "Manage very well",
    iafcon==2   ~ "Manage quite well",
    iafcon==3   ~ "Get by alright",
    iafcon==4 | iafcon==5 | iafcon==6 ~ "Does not manage well"
  )),
  psagf.r=ifelse(psagf<0,NA,psagf),
  indager.r=ifelse(indager<0,NA,indager),
  AgeGap.r=indager.r-psagf.r,
  AgeGap31.f=as.factor(case_when(
    indager.r<psagf.r ~ "Feels older than age",
    indager.r==psagf.r ~ "Feels their age",
    indager.r>psagf.r ~ "Feels younger than age",
)),
  AgeGap31.fr=AgeGap31.f,
  AgeGap32.f=as.factor(case_when(
    abs(AgeGap.r)<=3 ~ "Feels within 3 years of actual age",
    indager.r<(psagf.r+3) ~ "Feels > 3 years older",
    indager.r>(psagf.r+3) ~ "Feels > 3 years younger",
)),
  AgeGap32.fr=AgeGap32.f,
   sclfcoa.f=as_factor( sclfcoa,"both"),            
    sclfcoa.fr=as.factor(case_when(
    sclfcoa==4 | sclfcoa==5 | sclfcoa==6  ~ "Give back to community",
    sclfcoa==1 | sclfcoa==2 | sclfcoa==3     ~ "Not so much",
  )),
   sptraa.f=as_factor( sptraa,"both"),            
    sptraa.fr=as.factor(case_when(
    sptraa==1 | sptraa==2  ~ "Several times a week/daily",
    sptraa==3 | sptraa==4     ~ "MT once a month",
    sptraa==5 | sptraa==6  ~ "Monthly or less"
  )),
   scorgch.f=as_factor( scorgch,"both"),            
    scorgch.fr=as.factor(case_when(
    scorgch==1   ~ "Member of a charity",
    scorgch==0     ~ "Not a member"
  )),
   tenureb.f=as_factor( tenureb,"both"),            
   tenureb.fr=as.factor(case_when(
   tenureb==1   ~ "Owner",
   tenureb==2 | tenureb==3 ~ "Mortgage",
   tenureb==4 |tenureb==5  ~ "Renter"
  )),
   w10nssec5.f=as_factor( w10nssec5,"both"),            
   w10nssec5.fr=as.factor(case_when(
   w10nssec5==1   ~ "Higher MAP",
   w10nssec5==2  ~ "Intermediate",
  w10nssec5==3 | w10nssec5==4  ~ "Small emp, lower superv.",
    w10nssec5==5  ~ "Semi-routine/routine"
  )),
  wpdes.f=as_factor(wpdes,"both"),            
  wpdes.fr=as.factor(case_when(
    wpdes==1 | wpdes==96 ~ "Retired (inc part)",
    wpdes==2 | wpdes==3~ "In employment",
    wpdes==4 | wpdes==6~ "FT carer + unemp.",
    wpdes==5 ~ "LT sick/disabled"
  ))            

)            



#### Voting record - 2001-2017 
for(l in c("VotGE01","VotGE05","VotGE15","VotGE17")){
  tmp<-as.numeric(
       eval(
         parse(
           text=paste0("elsaw$",l)
           )
         )
       )

#    elsaw[paste0(l,".n")]<-ifelse(tmp<0 | is.na(tmp),0,tmp)  
elsaw[paste0(l,".n")]<-ifelse(tmp<0,0,tmp)  
  
}

### Raw GE voting number
elsaw$votrec<-elsaw$VotGE01.n+elsaw$VotGE05.n+elsaw$VotGE15.n+elsaw$VotGE17.n

### Factor version, 3 cat 
elsaw<-elsaw|>mutate(
VotRec2.fr=as.factor(case_when(
  votrec==0 ~ "None", 
  votrec==1 | votrec==2 | votrec==3 | votrec==4 ~ "Voted in the past")),
  VotRec0.fr=as.factor(case_when(
  votrec==0 ~ "None", 
  votrec==1 | votrec==2 ~ "1-2",
  votrec==3 | votrec==4 ~ "3-4")),
VotRec01.fr=as.factor(case_when(
    votrec==0 | votrec==1~ "None or 1", 
    votrec==2 ~ "2",
    votrec==3 | votrec==4 ~ "3-4")
) )

```



```{r factor}
### correcting a missing value in the label of VotGE05


attr(elsaw$VotGE05, "labels")<-c("Not answered","Item not applicable","No","Yes") 


for (hav in wvars  ) {
    elsaw<-cbind(elsaw,tmp=tfactor(
    eval(
      parse(
        text=paste0("elsaw$",hav)))))

names(elsaw)[ncol(elsaw)]<-paste0(hav,".f")
  }

### Issue with value labels (2)
levels(elsaw$VotGE05.f)<-c("[-9] Not answered","[-1] Item not applicable","[0] No","[1] Yes")
```



```{r miscrec}
for(ov  in ovars) { ### Continuous vars exlo80 & exlo90 removed
#nv<-paste0(ov,".fr")
#ov<-paste0(v,".f")
  elsaw<-elsaw|>mutate(nv=
          as.factor(eval(
      parse(
        text=paste0(  
          "ifelse(as.numeric(",ov,")<0 | as.numeric(",ov,")>80,NA,",
          ov,")"
        )
      )
  )
  )
  )
names(elsaw)[ncol(elsaw)]<-paste0(ov,".fr")
}

levels(elsaw$VotGE19.fr)<-c("Didn't vote","Voted")
levels(elsaw$VotGE17.fr)<-c("Didn't vote","Voted")
levels(elsaw$VotGE15.fr)<-c("Didn't vote","Voted")
levels(elsaw$VotGE05.fr)<-c("Didn't vote","Voted")
levels(elsaw$VotGE01.fr)<-c("Didn't vote","Voted")





for(vr in names(labs[-19])){                        ### Leaving AgeCaat out
  attr(elsaw[vr],"label")<-labs[[vr]]
}


### Missing labels
levels(elsaw$scorgpo.fr)<-c("No", "Yes")
levels(elsaw$scorgrl.fr)<-c("No", "Yes")
levels(elsaw$erfvol.fr)<-names(attr(elsaw$erfvol, "labels")[4:5])
levels(elsaw$ethnic.fr)<-names(attr(elsaw$ethnic, "labels")[3:4])
levels(elsaw$headlba.fr)<-names(attr(elsaw$headlba, "labels")[4:5])
levels(elsaw$headlbe.fr)<-names(attr(elsaw$headlbe, "labels")[4:5])
levels(elsaw$hobb.fr)<-names(attr(elsaw$hobb, "labels")[4:5])
levels(elsaw$iafind.fr)<-names(attr(elsaw$iafind, "labels")[4:7])
levels(elsaw$indsex.fr)<-names(attr(elsaw$indsex, "labels")[4:5])
levels(elsaw$pscedd.fr)<-names(attr(elsaw$pscedd, "labels")[4:5])
levels(elsaw$pscede.fr)<-names(attr(elsaw$pscede, "labels")[4:5])
levels(elsaw$spcar.fr)<-names(attr(elsaw$spcar, "labels")[4:5])

``` 






## 1. Variables included

|Description|Name|Variable label|Valid responses|
|----|-----------|------------------------------------|-----------:
Age  2 categories  | AgeCat2    | `{r} labs[["AgeCat2.fr"]]` |`{r} prettyNum(as.numeric(table(is.na(elsaw$AgeCat2.fr)))[1],big.mark = ",")` 
Age 3 categories  | AgeCat3    | `{r} labs[["AgeCat3.fr"]]` |`{r} prettyNum(as.numeric(table(is.na(elsaw$AgeCat3.fr)))[1],big.mark = ",")` 
Age Gap continuous | AgeGap    | `{r} labs[["AgeGap.r"]]` |`{r} prettyNum(as.numeric(table(is.na(elsaw$AgeGap.r)))[1],big.mark = ",")` 
Age  Gap 3 categories (exact) | AgeCat31    | `{r} labs[["AgeGap31.f"]]` |`{r} prettyNum(as.numeric(table(is.na(elsaw$AgeGap31.fr)))[1],big.mark = ",")` 
Age  Gap 3 categories (within 3 years) | AgeCat32    | `{r} labs[["AgeGap32.f"]]` |`{r} prettyNum(as.numeric(table(is.na(elsaw$AgeGap32.fr)))[1],big.mark = ",")` 
Mental Health| CFMAP |`{r} attr(elsaw$cfmap, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$cfmap.fr)))[1],big.mark = ",")` 
Memory issues| CFMETM|`{r}  attr(elsaw$cfmetm, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$cfmetm.fr)))[1],big.mark = ",")` 
Grandchildren|DIGRAN |`{r}  attr(elsaw$digran, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$digran.fr)))[1],big.mark = ",")` 
Marital status|DIMARR |`{r} attr(elsaw$dimarr, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$dimarr.fr)))[1],big.mark = ",")` 
Education/highest qualification| EDQUAL|`{r} attr(elsaw$edqual, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$edqual.fr)))[1],big.mark = ",")` 
Volunteering | ERFVOL|`{r}  attr(elsaw$erfvol, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$erfvol.fr)))[1],big.mark = ",")` 
Caring for children  | ERLVOLBA|`{r}  attr(elsaw$erlvolba, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$erlvolba.fr)))[1],big.mark = ",")` 
Caring for frail/sick  | ERLVOLPE|`{r}  attr(elsaw$erlvolpe, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$erlvolpe.fr)))[1],big.mark = ",")` 
Ethnicity | ETHNIC|`{r} attr(elsaw$ethnic, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$ethnic.fr)))[1],big.mark = ",")` 
Life expectancy expectation | EXLO80|`{r}  attr(elsaw$exlo80, "label")` |`{r} prettyNum(as.numeric(table((elsaw$exlo80<0)))[1],big.mark = ",")`
Life expectancy expectation (85+) | EXLO90|`{r}  attr(elsaw$exlo90, "label")` |`{r} prettyNum(as.numeric(table((elsaw$exlo90<0)))[1],big.mark = ",")` 
Whether enough money | EXRELA|`{r}  attr(elsaw$exrela, "label")` |`{r} prettyNum(as.numeric(table((elsaw$exrela<0)))[1],big.mark = ",")` 
Financial future | EXRSLF|`{r}  attr(elsaw$exrslf, "label")` |`{r} prettyNum(as.numeric(table((elsaw$exrslf<0)))[1],big.mark = ",")` 
General Health| HEHELF|`{r} attr(elsaw$hehelf, "label")` |`{r} prettyNum(as.numeric(table((elsaw$hehelf<0)))[1],big.mark = ",")` 
Household type| HHDTYPB|`{r} attr(elsaw$hhdtypb, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$hhdtypb.fr)))[1],big.mark = ",")` 
Capacity everyday activities|HEADLBA|`{r}  attr(elsaw$headlba, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$headlba.fr)))[1],big.mark = ",")` 
Internet use | HOBB|`{r}  attr(elsaw$hobb, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$hobb.fr)))[1],big.mark = ",")` 
Financial situation|IAFCON|`{r}  attr(elsaw$iafcon, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$iafcon.fr)))[1],big.mark = ",")` 
Financial decisions|IAFIND|`{r}  attr(elsaw$iafind, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$iafind.fr)))[1],big.mark = ",")` 
Sex  | INDSEX    | `{r} attr(elsaw$indsex, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$indsex.fr)))[1],big.mark = ",")` 
Perceived age| PSAGF|`{r}  attr(elsaw$psagf, "label")` |`{r} prettyNum(as.numeric(table((elsaw$psagf<0)))[1],big.mark = ",")`  
Happiness | PSCEDD|`{r}  attr(elsaw$pscedd, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$pscedd.fr)))[1],big.mark = ",")` 
Social isolation | PSCEDE|`{r}  attr(elsaw$pscede, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$pscede.fr)))[1],big.mark = ",")` 
Voted at the 2019 GE|SCSPTRVT|- |`{r} prettyNum(as.numeric(table(is.na(elsaw$VotGE19.fr)))[1],big.mark = ",")` 
Charity membership | SCORGCH|`{r} attr(elsaw$scorgch, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$scorgch.fr)))[1],big.mark = ",")` 
Civic engagement|SCORGPO|`{r}  attr(elsaw$scorgpo, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$scorgpo.fr)))[1],big.mark = ",")` 
Religion | SCORGRL|`{r} attr(elsaw$scorgrl, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$scorgrl.fr)))[1],big.mark = ",")` 
Sense of community | SCLFCOA|`{r} attr(elsaw$sclfcoa, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$sclfcoa.fr)))[1],big.mark = ",")` 
Use of car | SPCAR|`{r}  attr(elsaw$spcar, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$spcar.fr)))[1],big.mark = ",")` 
Use of public transport | SPTRAA|`{r}  attr(elsaw$sptraa, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$sptraa.fr)))[1],big.mark = ",")` 
Housing tenure|TENUREB|`{r}  attr(elsaw$tenureb, "label")`|`{r} prettyNum(as.numeric(table(is.na(elsaw$tenureb.fr)))[1],big.mark = ",")` 
Past voting behaviour, V1|`{r}  labs[["VotRec0.fr"]]`|Voted in  past GE  (from previous waves 1, 3, 8, 9, 10)|`{r} prettyNum(as.numeric(table(is.na(elsaw$VotRec0.fr)))[1],big.mark = ",")` 
Past voting behaviour, V2|`{r}  labs[["VotRec01.fr"]]`|Voted in  past GE  (from previous waves 1, 3, 8, 9, 10)|`{r} prettyNum(as.numeric(table(is.na(elsaw$VotRec01.fr)))[1],big.mark = ",")` 
Social class ‚Äì NS-SEC | W10NSSEC5|`{r} attr(elsaw$w10nssec5, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$w10nssec5.fr)))[1],big.mark = ",")` 
Main economic activity| WPDES|`{r} attr(elsaw$wpdes, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$wpdes.fr)))[1],big.mark = ",")` 
Weights |w10xwgt | `{r} attr(elsaw$w10xwgt, "label")`      |-

:Table 1: Original and derived variables used in the analysis {tbl-colwidths="[25,5,65,5]"}

<!-- Lift from friends | SPLIFT|`{r}  attr(elsaw$splift, "label")` |`{r} prettyNum(as.numeric(table(is.na(elsaw$splift.fr)))[1],big.mark = ",")`  -->
<!-- Weights | w10w1lwgt | Wave 10 Longitudinal weight (wave 1 base)"                                       -->
<!-- Weights | w10w4lwgt | Wave 10 Longitudinal weight (wave 4 base)"                                       -->
<!-- Weights |w10scwt | Wave 10 main self-completion weight"   -->
<!-- - Other activities: WPACT -->
  


|Name|Fieldwork|Sample|Of which core|Vote asked|Last GE
|----|---------|-----------|-------|------|-------:
Wave 1 | 2002-03 | 12,100|11,391|Yes|June 2001 
Wave 2 |2004/05 |9,432|8,780|No|June 2001
Wave 3 |2006/07 |9,771|8,810|Yes|May 2005
Wave 4 |2008/09 |11,050|9,886|No|May 2005
Wave 5 |2010/11 | 10,274|9,090|No|May 2010
Wave 6 |2012/13 |10,601|9,169|No|May 2010
Wave 7 |2014/15 |9,666,|8,249|No|May 2010
Wave 8 |2016/17 |8,445| 7,223|Yes|May 2015
Wave 9|2018/19 |8,736| 7,289|Yes|June 2017
Wave 10|2021-23|-|-|Yes|Dec. 2019

:Table 2: *ELSA fieldwork dates and election turnout variables*

  Source: ELSA Wave 9 report, Table 1.1; Wikipedia.

  
## 2. Variables recoding 
  
### Recoding schemes:
  
1. Household type (HHDTYPB):
  
  - Single person (adult) households 
  - Families (large + small)
  - 2 adults households
  - Large adults HH


2. Marital status (DIMARR)

  - Single/never married
  - Married
  - Separated/dicvorced/widowed

3. Employment status (WPDES)

  - Retired + looking after family/home
  - In employment 
  -  Long term sick + unemployed

4. Highest qualification (EDQUAL)

  - Detailed version
  
    - Degree or equivalent 
    - Higher ed below degree
    - A level or equivalent
    - GCSE or equivalent
    - Foreign
    - No qualification

  - Short version
  
    - Higher education 
    - Secondary education
    - Foreign
    - No qualification


#### Recoding notes and issues

- There is potentially a large drop in the number of  observations resulting from  combining the voting records across waves: `{r} prettyNum(length(!is.na(elsaw$VotGE19)[!is.na(elsaw$VotGE01) | !is.na(elsaw$VotGE05) | !is.na(elsaw$VotGE15) | !is.na(elsaw$VotGE15)]),big.mark = ",")`. For this reason, missing values were coded as 0. As a result there may be a need to add a control for British vs non British citizenship. 

- Ethnicity has `{r} prettyNum(table(is.na(elsaw$ethnic))[2],big.mark = ",")` missing values. I do not recommend using it.
- Same with social class:  `{r} prettyNum(as.numeric(table((elsaw$w10nssec5==-3))[2]),big.mark = ",")` respondents had no job information collected .

- DIGRAN: the number of grandchildren was asked at  Wave 4 then pushed forward (ELSA User Guide Wave 5 p14). As a result, there is large number of missing values at Wave 10.

- Age gaps continuous was coded as biological age - self perceived age

- Expectation to live to 85 and beyond: the original variable is recorded as subjective probability expressed as percentage (1-100%). The recoded variable was constructed as whether this probability is greater than 50%.  


## 3. Univariates results

Results are presented as follows, under each tab below:
  
  1.  Unweighted frequencies and proportions of the original variables, unrecoded
  2.  Weighted frequencies and proportions of the recoded (ie missing/invalid values removed) variables

Please note that in the case of newly derived variable 1. and 2. will be identical 



::: {.panel-tabset}


```{r univariates}
#| results: asis
#| echo: false



elsaw$AgeGap31.fr<-elsaw$AgeGap31.f
elsaw$AgeGap32.fr<-elsaw$AgeGap32.f

elsaw.s<-svydesign(~1,weights=~w10xwgt,data=elsaw)

# Apply the function to all  variables 

rslt.u<-  lapply(c(uvars[uvars!="exlo80.f" & uvars!="exlo90.f"& uvars!="psagf.f"],dvars), function(v) vfreq(v, elsaw))

rslt.r <- lapply(c(rvars[rvars!="exlo80.fr" & rvars!="exlo90.fr"& rvars!="psagf.fr"],dvars), function(v) wfreq2(v, elsaw.s) )



# Print the tables for each dependent variable using kable for better formatting
for (i in 1:length(rslt.u)) {
   cat('### ', labs[[c(uvars[uvars!="exlo80.f" & uvars!="exlo90.f"& uvars!="psagf.f"],dvars)[i]]], '\n')
  
    cat(paste0("#### **Unweighted frequency table of unrecoded *",c(uvars[uvars!="exlo80.f" & uvars!="exlo90.f"& uvars!="psagf.f"],dvars)[i],"* **", '\n'))
    print(rslt.u[[i]])
    cat('\n')
    

    cat(paste0("#### **Weighted frequency table of recoded *", c(rvars[rvars!="exlo80.fr" & rvars!="exlo90.fr"& rvars!="psagf.fr"],dvars)[i],"* **", '\n'))
    print(rslt.r[[i]])

cat('\n')

}

cat('\n')
cat('\n')
cat('### ', labs[["psagf"]], '\n')
cat('\n')
 
 cat('\n')
cat('**Unweighted results**') 
cat("\n")

psagf<-ifelse(elsaw$psagf>=0,elsaw$psagf,NA)
kable(round(
  summarytools::descr(
    psagf, 
    stats = c("common", "n"), 
    transpose=T),1
)
  )

cat('\n')
cat('**Weighted results**') 
cat("\n")

w10xwgt<-ifelse(elsaw$psagf>=0,elsaw$w10xwgt,0)
kable(round(
        summarytools::descr(psagf, 
                          stats = c("common", "n"), 
                          transpose=T,
                          weights = w10xwgt
                          ),1
        )
)


par(mfrow = c(1, 2))

hist(elsaw$psagf,
     main=labs[["psagf"]],xlab="Age")
cat('\n')

wtd.hist(psagf,
         weight=w10xwgt,
         main=paste0(labs[["psagf"]], " (weighted)"),xlab="Age")
cat('\n')

cat('\n')
cat('\n')
cat('### ', labs[["exlo80"]], '\n')
cat('\n')

 cat('\n')
cat('**Unweighted results**') 
cat("\n")

exlo80<-ifelse(elsaw$exlo80>=0,elsaw$exlo80,NA)
kable(round(
  summarytools::descr(
    exlo80, 
    stats = c("common", "n"), 
    transpose=T),1
)
  )

cat('\n')
cat('**Weighted results**') 
cat("\n")

w10xwgt<-ifelse(elsaw$exlo80>=0,elsaw$w10xwgt,0)
kable(round(
        summarytools::descr(exlo80, 
                          stats = c("common", "n"), 
                          transpose=T,
                          weights = w10xwgt
                          ),1
        )
)


par(mfrow = c(1, 2))

hist(elsaw$exlo80,          
     main="Exp (%) that will live to [age]",xlab="Expected Age"
     )
cat('\n')

wtd.hist(exlo80,
         weight=w10xwgt,
        main="Idem  (recoded & weighted)",xlab="Expected Age")
cat('\n')

cat('\n')
cat('\n')
cat('### ', labs[["exlo90"]], '\n')
 cat('\n')

 cat('\n')
cat('**Unweighted results**') 
cat("\n")

exlo90<-ifelse(elsaw$exlo90>=0,elsaw$exlo90,NA)

kable(round(
  summarytools::descr(
    exlo90, 
    stats = c("common", "n"), 
    transpose=T),1
)
  )


cat('\n')
cat('**Weighted results**') 
cat("\n")

w10xwgt<-ifelse(elsaw$exlo90>=0,elsaw$w10xwgt,0)

kable(round(
        summarytools::descr(exlo90, 
                          stats = c("common", "n"), 
                          transpose=T,
                          weights = w10xwgt
                          ),1
        )
)



cat('\n')

par(mfrow = c(1, 2))

hist(elsaw$exlo90,
         main="Exp. prob. of living beyond 85",xlab="Probability")
cat('\n')

wtd.hist(exlo90,
         weight=w10xwgt,
         main="Idem  (recoded & weighted)",xlab="Probability")
cat('\n')

cat('\n')
cat('\n')
cat('### ', labs[["AgeGap.r"]], '\n')
 cat('\n')

 cat('\n')
cat('**Unweighted results**') 
cat("\n")

AgeGap.r<-ifelse(elsaw$AgeGap.r>=0,elsaw$AgeGap.r,NA)

kable(round(
  summarytools::descr(
    AgeGap.r, 
    stats = c("common", "n"), 
    transpose=T),1
)
  )


cat('\n')
cat('**Weighted results**') 
cat("\n")

w10xwgt<-ifelse(elsaw$AgeGap.r>=0,elsaw$w10xwgt,0)

kable(round(
        summarytools::descr(AgeGap.r, 
                          stats = c("common", "n"), 
                          transpose=T,
                          weights = w10xwgt
                          ),1
        )
)



cat('\n')

par(mfrow = c(1, 2))

hist(elsaw$AgeGap.r,
         main="Gap between actual and perceived age",xlab="Years")
cat('\n')

wtd.hist(AgeGap.r,
         weight=w10xwgt,
         main="Idem  (weighted)",xlab="Years")
cat('\n')


cat('\n:::')
cat('\n')

```




## 4. Bivariates results

This section contains for each variable used in the study, the following contingency tables:

  1. With voter turnout at the 2019 General Election
  2. With sex
  3. With age, two and three categories

All contingency tables were computed with weighted data and include  $\chi^2$ test of independence.


### **4.1. Voter turnout at the 2019 GE **


::: {.panel-tabset}

```{r biv}
#| results: asis
#| echo: false
elsaw.s<-svydesign(~1,weights=~w10xwgt,data=elsaw)

labs[["AgeCat2.f"]]<-"Recoded age, 2 category"
labs[["AgeCat3.f"]]<-"Recoded age, 3 category"
labs[["VotRec2.f"]]<-"Past voting record, dichotomic"
labs[["VotRec0.f"]]<-"Past voting record, v1"
labs[["VotRec01.f"]]<-"Past voting record, v2"

for (v in c(bivars19, "AgeCat2", "AgeCat3")) {
  
   cat('#### ', labs[[paste0(v,".f")]], '\n')
 
  cat(paste0("##### *Whether voted at 2019 GE by ",labs[[paste0(v,".f")]],"(",v, ")*"))

  tmp.t<-svytable(as.formula(paste0("~VotGE19.fr + ", v,".fr")), elsaw.s)
  tmp.p<-data.frame(do.call(cbind, Map(cbind, as.data.frame.matrix(round(tmp.t,1)), as.data.frame.matrix(rowPct(tmp.t)))))
  tmp.p<-rbind(rep(c("Freq","%"),ncol(tmp.p)/2),tmp.p,colSums(tmp.p))
  rownames(tmp.p)<-c("",rownames(tmp.t),"Total")
  names(tmp.p)<-c(rbind(colnames(tmp.t)," "))
  
  print(kable(
    tmp.p
  ),'html')
  
  cat('\n')
  
  t<-svychisq(as.formula(paste0("~", v,".fr","+ VotGE19.fr")), elsaw.s)
  
  print(t$method)
  cat('\n')
  print(c(round(c(t$statistic,t$parameter[1], t$p.value),3)))
  cat('\n')
  
  ################################################################################################
  
}

cat('\n:::')

```




### **4.2. Sex **

::: {.panel-tabset}

```{r bisex}
#| results: asis
#| echo: false

for (v in c(bivars19,"VotGE19")) {
  
  if(v!="indsex"){
     ttl<-labs[[paste0(v,".f")]]

       if(v=="Agecat2" | v=="Agecat3"){
     ttl<-labs[[paste0(v,".fr")]]
       }
     
   cat('#### ', labs[[paste0(v,".f")]], '\n')
 
    cat(paste0("##### *Sex by ",labs[[paste0(v,".f")]],"(",v, ")*"))

    
    tmp.t<-svytable(as.formula(paste0("~indsex.fr + ", v,".fr")), elsaw.s)
    tmp.p<-data.frame(do.call(cbind, Map(cbind, as.data.frame.matrix(round(tmp.t,1)), as.data.frame.matrix(rowPct(tmp.t)))))
    tmp.p<-rbind(rep(c("Freq","%"),ncol(tmp.p)/2),tmp.p,colSums(tmp.p))
  rownames(tmp.p)<-c("",rownames(tmp.t),"Total")
  names(tmp.p)<-c(rbind(colnames(tmp.t)," "))
    
    print(kable(tmp.p))
    cat('\n')
    
    t<-svychisq(as.formula(paste0("~", v,".fr","+ indsex.fr")), elsaw.s)
    
    print(t$method)
    cat('\n')
    print(c(round(c(t$statistic,t$parameter[1], t$p.value),3)))
    
  cat('\n')
  
  ################################################################################################
  }
}

cat('\n:::')

```

  
### **4.3. Age, 2 & 3 categories **

::: {.panel-tabset}

```{r biage}
#| results: asis
#| echo: false

for (v in c(bivars19,"VotGE19")) {
  
  if(v!="AgeCat2" & v!="AgeCat3"){
  
  
   cat('#### ', labs[[paste0(v,".f")]], '\n')
 
    cat(paste0("##### *Age 2 category by ",labs[[paste0(v,".f")]],"(",v, ")*"))
  
  tmp.t<-svytable(as.formula(paste0("~AgeCat2.fr +", v,".fr")), elsaw.s)
  tmp.p<-data.frame(do.call(cbind, Map(cbind, as.data.frame.matrix(round(tmp.t,1)), as.data.frame.matrix(rowPct(tmp.t)))))
  tmp.p<-rbind(rep(c("Freq","%"),ncol(tmp.p)/2),tmp.p,colSums(tmp.p))
  rownames(tmp.p)<-c("",rownames(tmp.t),"Total")
  names(tmp.p)<-c(rbind(colnames(tmp.t)," "))
  
  print(kable(tmp.p))
  cat('\n')
  
  
  t<-svychisq(as.formula(paste0("~", v,".fr","+ AgeCat2.fr")), elsaw.s)
  print(t$method)
  cat('\n')
  
  print(c(round(c(t$statistic,t$parameter[1], t$p.value),3)))
  cat('\n')
  
    cat(paste0("##### *Age 3 category by ",labs[[paste0(v,".f")]],"(",v, ")*"))
  cat('\n')
  tmp.t<-svytable(as.formula(paste0("~AgeCat3.fr + ", v,".fr")), elsaw.s)
  tmp.p<-data.frame(do.call(cbind, Map(cbind, as.data.frame.matrix(round(tmp.t,1)), as.data.frame.matrix(rowPct(tmp.t)))))
  tmp.p<-rbind(rep(c("Freq","%"),ncol(tmp.p)/2),tmp.p,colSums(tmp.p))
  rownames(tmp.p)<-c("",rownames(tmp.t),"Total")
  names(tmp.p)<-c(rbind(colnames(tmp.t)," "))
  
  print(kable(tmp.p))
  cat('\n')
  
  
  t<-svychisq(as.formula(paste0("~", v,".fr","+ AgeCat3.fr")), elsaw.s)
  
  print(t$method)
  cat('\n')
  print(c(round(c(t$statistic,t$parameter[1], t$p.value),3)))
  
  cat('\n')
  }
}
cat('\n:::')
```




## 5. Further descriptives
  
This section presents:

- Unweighted three way tables of age (two categories) and sex by whether voted at the 2019 general elections. These are unweighted due to the small number of observations for a significant number of categories.

- Plot of cross-sectional (weighted) proportions of 50+ who cast their ballot at the GE, by election year, sex and age 




### 5.1 IVs by age, sex and whether voted at the 2019 GE

::: {.panel-tabset}

```{r 4way}
#| output: asis

  # Loop over each F_n in M
for (v in bivars19[-c(1,2)]) {
  
    fn<-paste0(v,".fr")
    fl<-ifelse(v=="VotRec01" | v== "VotRec0",paste0(v,".fr"),paste0(v,".f"))
  
  cat("#### ", labs[[fl]], " \n")
    # Use dplyr to group by AgeCat2.fr and indsex.fr
  elsaw |>
    filter(!is.na(elsaw$AgeCat2.fr) &  !is.na(elsaw[[fn]])) |>
    group_by(AgeCat2.fr, indsex.fr) |>
    group_split() |>
    lapply(function(sub_elsaw) {
      AgeCat2.fr_val <- as.character(unique(sub_elsaw$AgeCat2.fr))
      indsex.fr_val <- as.character(unique(sub_elsaw$indsex.fr))
      
      tab <- table(sub_elsaw$VotGE19.fr,sub_elsaw[[fn]])
      col_totals <- colSums(tab)
      col_perc <- prop.table(tab, 2) * 100
      
      # Combine count and % into one table
      result <- matrix(paste0(tab, " (", sprintf("%.1f", col_perc), "%)"), 
                       nrow = nrow(tab), dimnames = dimnames(tab))
      
      # Convert to data frame for pretty printing
      result_df <- as.data.frame.matrix(result)
      result_df <- cbind(FactorLevel = rownames(result_df), result_df)
      result_df <- rbind(result_df, c("Total", as.character(col_totals)))
      rownames(result_df)<-c(result_df$FactorLevel)
      result_df<-result_df[,-1]
      cat("\n **Age: **", AgeCat2.fr_val, ", **Sex: **", indsex.fr_val, " \n")
      print(kable(result_df))
    })
}
cat('\n:::')
```


### 5.2 Voting pattern by age, sex and general election


```{r plotge}
#| fig-width: 12
#| fig-height: 10

for(ds in names(voted)) {
  voted[[ds]]<-voted[[ds]] |>mutate(AgeCat3.f=as.factor(case_when(
    indager>=50 & indager<70 ~ "50-69",
    indager>=70 & indager<80 ~ "70-79",
    indager>=80  ~ "80+"
  )))
}

results<-list()
des <- list(
  GE01 = svydesign(ids = ~1, weights = ~w1wgt, data=voted[["GE01"]] |>filter(!is.na(w1wgt))),
  GE05 = svydesign(ids = ~1, weights = ~w3xwgt, data=voted[["GE05"]] |>filter(!is.na(w3xwgt))),
  GE15 = svydesign(ids = ~1, weights = ~w8xwgt, data=voted[["GE15"]] |>filter(!is.na(w8xwgt))),
  GE17 = svydesign(ids = ~1, weights = ~w9xwgt, data=voted[["GE17"]] |>filter(!is.na(w9xwgt))),
  GE19 = svydesign(ids = ~1, weights = ~w10xwgt, data=voted[["GE19"]] |>filter(!is.na(w10xwgt)))
)

for(ds in names(des)) {
  age_est <- svyby(~I(Wvot == 1), ~AgeCat3.f, des[[ds]], svymean, vartype = "ci", keep.var = TRUE)
  names(age_est)[1]<-"Category"
  #  age_est$Category <- "AGE"
  #  age_est$Level <- as.factor(age_est$AGE)
  age_est<-age_est|>select(Category,"I(Wvot == 1)TRUE","ci_l.I(Wvot == 1)TRUE","ci_u.I(Wvot == 1)TRUE"  )
  age_est$Dataset <- ds
  
  # Proportion by SEX
  sex_est <- svyby(~I(Wvot == 1), ~as_factor(indsex), des[[ds]], svymean, vartype = "ci", keep.var = TRUE)
  names(sex_est)[1]<-"Category"
  sex_est<-sex_est|>select(Category,"I(Wvot == 1)TRUE","ci_l.I(Wvot == 1)TRUE","ci_u.I(Wvot == 1)TRUE"  )
  sex_est$Dataset <- ds
  
  # Combine
  results[[ds]] <- rbind(age_est, sex_est)
}  

plot_data <- bind_rows(results)
plot_data[,2:4]<-round(plot_data[,2:4]*100,1)
plot_data$Dataset<-as.factor(plot_data$Dataset)
levels(plot_data$Dataset)<-c(2001,2005,2015,2017,2019)
# Rename columns for ggplot
plot_data <- plot_data |>
  rename(Proportion = `I(Wvot == 1)TRUE`,
         CI_low = `ci_l.I(Wvot == 1)TRUE`,
         CI_high = `ci_u.I(Wvot == 1)TRUE`)

# Plotting
ggplot(plot_data, aes(x = Category, y = Proportion, group = Dataset)) +
  #  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = CI_low, ymax = CI_high), size=.9, width = 0.2) +
  geom_text(aes(label = Proportion), hjust = -.5, size = 4) +
  facet_wrap(~Dataset) +
  labs(title = "Proportion who voted at the last general election, by age and sex",
       x = "General Election Year",
       y = "Percent voted with 95% CIs",
       caption="Weighted cross-sectional estimates, ELSA Waves 1, 3, 8, 9, 10 data") +
  theme_minimal() +
  theme(strip.text = element_text(size = 18),
        axis.text.x = element_text(size = 14),
        axis.text.y = element_text(size = 14),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        plot.caption=element_text(hjust = 0),
        plot.title.size=element_text(size = 18))
```

 


## 6. Multivariate results

This section presents the results of four series of stepwise logistic regression models of voter turnout at the 2019 general election against:
  
1. Turnout at previous GE & socio-economic variables (not including tenure)
2. Turnout at previous GE, SEV (including housing tenure) 
3. Turnout at previous GE, SEV  (not including tenure), and independent variables (IVs): 

- Internet connection; 
- Whether lonely; 
- General Health; 
- Financial situation; 
- Memory; Grandchildren; 
- Happiness; 
- Give back to community; 
- Whether member of political party, union or group; 
- Whether member of a charity; 
- Self perceived age gap; 
- Whether a carer.
as well as  independent variables: self-rated health, self-rated mental abilities, self-rated memory, financial situation, sense of loneliness, presence of an internet  connection, involvement in volunteering socio economic characteristiscs.

4. As 3. including tenure

All models were fitted using weights.

::: {.panel-tabset}


### 6.1 Socio-economic variables & whether voted at previous GE 


#### Stepwise models

```{r 6.1}
#| output: asis


 elsaw$dimarr.fr<-relevel(elsaw$dimarr.fr,ref=2)
 elsaw$tenureb.fr<-relevel(elsaw$tenureb.fr,ref=2)
 elsaw$edqual.fr<-relevel(elsaw$edqual.fr,ref=4)
 elsaw$wpdes.fr<-relevel(elsaw$wpdes.fr,ref=4)
 elsaw$AgeCat3.fr<-relevel(elsaw$AgeCat3.fr,ref=1)
 elsaw$AgeGap31.fr<-relevel(elsaw$AgeGap31.fr,ref=3)
 elsaw$AgeCap32.fr<-relevel(elsaw$AgeGap32.fr,ref=2)


elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars1))|> 
  na.exclude()


regs1<-list()
tmpR<-list()

for(mod in 1:(length(regvars1))){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars1[c(1:(mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab1,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars1[1:(mod)]) 

  regs1[[paste0("a1",mod)]] <- tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 
}  
  


MS1<-tbl_merge(tbls=regs1,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**", 
                               "**M5**", "**M6**")) |>
    modify_table_body(~.x |>
                          dplyr::arrange(match(var_label,
                                               c(as.character(reglab1),"AIC", "logLik", "nobs" ))))


MS1

```

#### Coefficient plot of Models 6         

```{r plot_6.1}
#| fig-width: 12
#| fig-height: 10

tmpR[["a16"]] |>plot()

```

### 6.2 SEV incl. tenure & turnout at previous GE
  
#### Stepwise models
  
```{r 6.2}
#| output: asis


elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars2))|> 
  na.exclude()


regs2<-list()
tmpR<-list()

for(mod in 1:(length(regvars2))){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars2[c(1:(mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab1,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars2[1:(mod)]) 

  regs2[[paste0("a1",mod)]] <- tmpR[[paste0("a1",mod)]]|>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}  
  

MS2<-tbl_merge(tbls=regs2,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**", 
                               "**M5**", "**M6**", "**M7**")) |>
    modify_table_body(~.x |>
                          dplyr::arrange(match(var_label,
                                               c(as.character(reglab1),"AIC", "logLik", "nobs" ))))



MS2




```

#### Coefficients plot of Models 7 

```{r plot_6.2}
#| fig-width: 12
#| fig-height: 10

tmpR[["a17"]] |>plot()

```



### 6.3 SEV, turnout at previous GE,  independent variables

#### Stepwise models

```{r 6.3}
#| output: asis


elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars3))|> 
  na.exclude()


regs3<-list()
tmpR<-list()

for(mod in 1:(length(regvars3)-6)){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars3[c(1:(6+mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab2,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars3[c(1,7:(6+mod))]) 

regs3[[paste0("a1",mod)]] <-tmpR[[paste0("a1",mod)]]|>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}  


MS3<-tbl_merge(tbls=regs3,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**", 
                               "**M5**", "**M6**", "**M7**", "**M8**", "**M9**"))  |>
     modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab2),"AIC", "logLik", "nobs" ))))


MS3
  
```




#### Coefficients plot of Models  9

```{r plot_6.3}
#| fig-width: 12
#| fig-height: 10

tmpR[["a19"]] |>plot()
```

### 6.4 SEVs and IVs,  turnout at previous GE and tenure

#### Stepwise models

```{r 6.4 }
#| output: asis

elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars4))|> 
  na.exclude()


regs4<-list()
tmpR<-list()

for(mod in 1:(length(regvars4)-7)){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars4[c(1:(7+mod))],collapse="+")))


tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab2,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars4[c(1,8:(7+mod))]) 

regs4[[paste0("a1",mod)]] <- tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}  
  
MS4<-tbl_merge(tbls=regs4,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**", 
                               "**M5**", "**M6**", "**M7**", "**M8**", "**M9**"))  |>
     modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab2),"AIC", "logLik", "nobs" ))))


MS4


```




#### Coefficients plot of Models  9

```{r plot_6.4}
#| fig-width: 12
#| fig-height: 10

tmpR[["a19"]] |>plot()
```




### 6.5 *No previous turnout*: - Socio-economic variables  


#### Stepwise models

```{r 6.5}
#| output: asis


elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars5))|> 
  na.exclude()


regs5<-list()
tmpR<-list()

for(mod in 1:(length(regvars5))){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars5[c(1:(mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab1[c(1:mod)],
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars5[1:(mod)]) 

regs5[[paste0("a1",mod)]]<-tmpR[[paste0("a1",mod)]]|>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}  
  

MS5<-tbl_merge(tbls=regs5,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**","**M5**"))  |>
               modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab1),"AIC", "logLik", "nobs" ))))


MS5


```

#### Coefficient plot of Models 6         

```{r plot_6.5_no}
#| fig-width: 12
#| fig-height: 10

tmpR[["a15"]] |>plot()

```

### 6.6  *No previous turnout*: - SEV incl. tenure
  
#### Stepwise models
  
```{r 6.6_no}
#| output: asis



elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars6))|> 
  na.exclude()


regs6<-list()
tmpR<-list()

for(mod in 1:(length(regvars6))){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars6[c(1:(mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab1,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars6[1:mod]) 

regs6[[paste0("a1",mod)]]<-
  tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}  
  

MS6<-tbl_merge(tbls=regs6,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**","**M5**", "**M6**"))  |>
               modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab1),"AIC", "logLik", "nobs" ))))


MS6


```

#### Coefficients plot of Models 7 

```{r plot_6.6_no}
#| fig-width: 12
#| fig-height: 10

tmpR[["a16"]] |>plot()

```


### 6.7 *No previous turnout*: - SEV + independent variables

#### Stepwise models

```{r 6.7_no}
#| output: asis


elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars7))|> 
  na.exclude()


regs7<-list()
tmpG<-list()
tmpR<-list()

for(mod in 1:(length(regvars7)-5)){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars7[c(1:(5+mod))],collapse="+")))

tmpG[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) 

tmpR[[paste0("a1",mod)]] <- tmpG[[paste0("a1",mod)]]|>  
                   tbl_regression(ci_method="wald",
                   label = reglab2,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars7[6:(5+mod)]) 

regs7[[paste0("a1",mod)]]<- tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 
}  
  

MS7<-tbl_merge(tbls=regs7,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**","**M5**", "**M6**", "**M7**", "**M8**","M9"))  |>
               modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab2),"AIC", "logLik", "nobs" ))))


MS7




```

#### Coefficients plot of Models  9

```{r plot_6.7_no}
#| fig-width: 12
#| fig-height: 10

tmpR[["a19"]] |>plot()
```

### 6.7.a *No past turnout*: SEVs, IVs & tenure; full output

```{r 6.7_nof}
#| output: asis


regs7f<-list()
tmpR<-list()

for(mod in 1:(length(regvars7)-5)){

tmpR[[paste0("a1",mod)]] <- tmpG[[paste0("a1",mod)]]|>  
                   tbl_regression(ci_method="wald",
                   label = c(reglab1[-7],reglab2),
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1) 

regs7f[[paste0("a1",mod)]]<- tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 
}  
  

MS7f<-tbl_merge(tbls=regs7f,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**","**M5**", "**M6**", "**M7**", "**M8**","M9"))  |>
               modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(c(reglab1[-7],reglab2)),"AIC", "logLik", "nobs" ))))


MS7f

```


### 6.8 *No past turnout*: SEVs, IVs & tenure

#### Stepwise models

```{r 6.8 }
#| output: asis

elsaw.r<-elsaw |> 
  select(VotGE19.fr,w10xwgt,all_of(regvars8))|> 
  na.exclude()


regs8<-list()
tmpR<-list()
for(mod in 1:(length(regvars8)-6)){

frm<-as.formula(paste0("VotGE19.fr ~ ",paste0(regvars8[c(1:(6+mod))],collapse="+")))

tmpR[[paste0("a1",mod)]]<-glm(
                  formula=frm,
                   weights=w10xwgt,
                   data=elsaw.r,
                   family=binomial()) |>  
                   tbl_regression(ci_method="wald",
                   label = reglab2,
                 tidy_fun = broom.helpers::tidy_parameters,
                 exponentiate = TRUE, 
                 digits=1,
                 include = regvars8[7:(6+mod)]) 

regs8[[paste0("a1",mod)]]<- tmpR[[paste0("a1",mod)]] |>
  add_glance_table(include=c(AIC,logLik,nobs)) |> 
  add_significance_stars(hide_ci = F, hide_p = TRUE, hide_se = T) 

}

MS8<-tbl_merge(tbls=regs8,
              tab_spanner = c("**M1**", "**M2**", "**M3**", "**M4**","**M5**", "**M6**", "**M7**", "**M8**", "**M9**"))  |>
               modify_table_body(~.x |>
                      dplyr::arrange(match(var_label,
                                               c(as.character(reglab2),"AIC", "logLik", "nobs" ))))


MS8

```




#### Coefficients plot of Models  9

```{r plot_6.8}
#| fig-width: 12
#| fig-height: 10

tmpR[["a19"]] |>plot()
```

:::

## Document version history

### *Changes from version 8*

1. Created two versions of the gap between biological and self-perceived age. Added them to descriptive and regression tables.
2. Created a dichotomic  version of the estimated probability of living to 85 and beyond.
3. Amended the recording of past voting behaviour with  missing recorded system misssing rather than no turnout.  
4. Added a full output version of Model 7.
5. Misc. model optimisations

#### *Changes from version 7*

Added 4 series of models without past voting behaviour as covariate.

#### *Changes from version 6*

1. Improved univariates for continuous variables (30)
2. Added age 2 and 3 categories to tables in Section 4.1 & 4.2; 2019 GE turnout to tables in Section 4.2 & 4.3. 
3. Added a new recoded version of SR mental health, abilities and general health
4. Renamed Tertiary ed as Further/Degree level.
5. Fixed display of unrecoded univariate frequencies
6. Amended multivariate analysis:

   - Removed household types
   - Removed age*sex interaction
   - Replaced past GE turnout with dichotomic version
   - New sets of stepwise tables including the new list of independent variables
  
#### Notes

DIGRAN (presence of granchildren) was not added to the regression models due to the small number of observations.
  
<!-- 2. Meeting (60) -->

#### *Changes from version 5*

1. Added  digran,erlvolba,erlvolpe,exlo80,exlo90,psagf,sclfcoa,scorgch 
2. Added a section for descriptives of continuous variables
3. Consolidated variables list  in Section 1

#### *Changes from version 4*
1. Recoded general and mental health as: Excellent/Very Good; Good/Fair; Poor. *Warning:  given the small number of obs for 'poor', this is likely to generate unreliable estimates * 

2. Added four way tables of whether voted by age, sex, by all other variables.

3. Revise model reference categories (see attached) *Note: No list was attached, let me know if this needs rearranging, this is a very quick amendment to make*

4. In model tables listed previous vote at bottom of table; re order log likelihood and GoF stats.

5. Checked and corrected  2005 GE turnout table

6. Reorganised regressions tables so that all series of models include interaction of age by sex as the last model.  

#### *To do*:

1. Add continuous IVs to the 4 way tables in Section 5.1
  